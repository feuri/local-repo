#!/usr/bin/env python3.2
# vim:ts=4:sw=4:noexpandtab

import sys

# Load localrepo before argparse, because of localization stuff!
from localrepo.localrepo import LocalRepo

from argparse import ArgumentParser


# Handle KeyboardInterrupt
excepthook = sys.excepthook

def lr_excepthook(type, value, traceback):
	if not type is KeyboardInterrupt:
		excepthook(type, value, traceback)
	else:
		LocalRepo.abort()

sys.excepthook = lr_excepthook

# Configure ArgumentParser
p = ArgumentParser(description=_('This program helps to manage local repositories. Specify '
                                 'the path to the repository with the first argument. If no '
                                 'option is specified, some repo information will be printed.'),
                   usage=_('%(prog)s path [options]'),
                   epilog=_('Please report bugs at: '
                            '<{0}>').format('https://github.com/ushis/local-repo/issues'))

p.add_argument('path', type=str, metavar=_('path'),
               help=_('path to the repo or the repo name if set up in your config file '
                      '\'{0}\''.format('~/.config/local-repo')))

p.add_argument('-a', '--add', action='store', dest='add', type=str, metavar=_('path'), nargs='+',
               help=_('add a package to the repo - path can point to a local or remote package '
                      'file, pkgbuild file or pkgbuild tarball - supported protocols are HTTP(S) '
                      'and FTP'))

p.add_argument('-A', '--aur-add', action='store', dest='aur_add', type=str, metavar=_('name'),
               nargs='+', help=_('download, build and add a package from the AUR to the repo'))

p.add_argument('-c', '--check', action='store_true', dest='check', default=False,
               help=_('run an integrity check'))

p.add_argument('-C', '--clear-cache', action='store_true', dest='clear_cache', default=False,
               help=_('clear the cache'))

p.add_argument('-e', '--elephant', action='store_true', dest='elephant', default=False,
               help=_('the elephant never forgets'))

p.add_argument('-f', '--force', action='store_true', dest='force', default=False,
               help=_('force an operation - use this with -a or --add to up-/downgrade a package'))

p.add_argument('-F', '--config-file', action='store', dest='config', type=str, metavar=_('path'),
               help=_('use an alternative config file (instead of '
                      '\'{0}\'').format('~/.config/local-repo)'))

p.add_argument('-i', '--info', action='store', dest='info', type=str, metavar=_('name'),
               nargs='+', help=_('display info for specified packages'))

p.add_argument('-l', '--list', action='store_true', dest='list', default=False,
               help=_('list all packages from the repo'))

p.add_argument('-r', '--remove', action='store', dest='remove', type=str, metavar=_('name'),
               nargs='+', help=_('remove packages from the repo'))

p.add_argument('-R', '--restore', action='store_true', dest='restore_db', default=False,
               help=_('restore repo database'))

p.add_argument('-s', '--search', action='store', dest='find', type=str, metavar=_('term'),
               help=_('find packages'))

p.add_argument('-U', '--aur-upgrade', action='store_true', dest='aur_upgrade', default=False,
               help=_('upgrade all packages in the repo, which are available in the AUR'))

p.add_argument('-V', '--vcs-upgrade', action='store_true', dest='vcs_upgrade', default=False,
               help=_('upgrade all packages in the repo, which are based on a VCS and available '
                      'in the AUR'))

args = dict((opt, arg) for opt, arg in vars(p.parse_args()).items() if arg)
force = False

if 'force' in args:
	force = args['force']
	del(args['force'])

# Init the repo
if 'config' in args:
	LocalRepo.init(args['path'], args['config'])
	del(args['config'])
else:
	LocalRepo.init(args['path'])

del(args['path'])

# Print repo info if no option is specified
if len(args) is 0:
	args['repo_info'] = True

# Run preload commands
for method in (opt for opt in ['clear_cache', 'elephant', 'restore'] if opt in args):
	getattr(LocalRepo, method)()
	del(args[method])

# Ready?
if not args:
	LocalRepo.shutdown()

# Load
LocalRepo.load_repo()

# Run add command
if 'add' in args:
	LocalRepo.add(args['add'], force)
	del(args['add'])

# Run commands
for method, arg in args.items():
	getattr(LocalRepo, method)() if type(arg) is bool else getattr(LocalRepo, method)(arg)

# Shutdown
LocalRepo.shutdown()
